#include "BUS.hpp" 
#include "variable.h"

BUS dastan(1 , 2,5);
	
BUS::BUS() 
{ }


void BUS::BusInit(void)
{

	DMAStatus = ready ;
	busStatus = ready;
  bus.HipHop ();
	HAL_UART_Receive_DMA(&huart2,&recHeader,1);
	HAL_UART_Receive_DMA(&huart3,&recHeader,1);
	HAL_UART_Receive_DMA(&huart1,&recHeader,1);
}
void BUS::HipHop (void)
{
	for (int counter=0;counter<6;counter ++)
	{
	  Toggle_LED_blue ;
  	Toggle_LED_red;
		HAL_Delay(100);
	}
}
void BUS::GetPacket (void)
{
				switch( mainCounter) 
				{
					case 0:
					   
						 CheckHeader( &PWM_pkg );
						 CheckHeader( &CNT_pkg );
					   CheckHeader( &FDB_pkg );
						 
						 break;
					case 1:
						switch(motorMode)
						{
							case PWMMode:
								Fillbuffer ( &PWM_pkg );
							  break;
							case CNTMode:
								Fillbuffer ( &CNT_pkg );
							  break;
							case FDBMode: 
								Fillbuffer ( &FDB_pkg );
							  break;
						};
						break;
				};

  
}
void BUS::CheckHeader (struct HeaderPacket* HeaderPacket)
{
	switch (HeaderPacket->headerCounter)
	{
		case 0:
			if ( recHeader == HeaderPacket->firstByte  )   HeaderPacket->headerCounter++;
			else          										             HeaderPacket->headerCounter=0;
		  break; 
		case 1:
		  if ( recHeader == HeaderPacket->secondByte )   HeaderPacket->headerCounter++;
			else if(recHeader == HeaderPacket->firstByte)  HeaderPacket->headerCounter=1;
			else                                           HeaderPacket->headerCounter=0;
			break; 
		case 2:
			if ( recHeader == HeaderPacket->thirdByte  )   // tayid header
      { 
				 
		
				recStatus  = ReceiveData ;

  			motorMode=HeaderPacket->packetID;  
				HeaderPacket->headerCounter=0 ; 
	 	  	mainCounter++; 
				
				if (motorMode == PWMMode || motorMode == CNTMode )
			  {
				  main_buff.resize (HeaderPacket->packetSize  );
	        main_buff.at (0) = HeaderPacket->firstByte ;
	        main_buff.at (1) = HeaderPacket->secondByte ;
	        main_buff.at (2) = HeaderPacket->thirdByte ;
					
			  }
				else if (motorMode == FDBMode )
			  {
					driver_buff.resize (HeaderPacket->packetSize   );
	        driver_buff.at (0) = HeaderPacket->firstByte ;
	        driver_buff.at (1) = HeaderPacket->secondByte ;
	        driver_buff.at (2) = HeaderPacket->thirdByte ;
			  }
			}   	
	    break; 
	}	
}
void BUS::Fillbuffer ( struct HeaderPacket* HeaderPacket)
{
	if (motorMode == PWMMode || motorMode == CNTMode )
		for (fillCounter= 3;fillCounter<HeaderPacket->packetSize ;fillCounter++ )
	     main_buff.at(fillCounter ) = recData[fillCounter - 3] ;
	else if (motorMode == FDBMode )
		for (fillCounter= 3;fillCounter<HeaderPacket->packetSize ;fillCounter++ )
	     driver_buff.at(fillCounter ) = recData[fillCounter - 3] ;

	
	
	if (fillCounter == HeaderPacket->packetSize  )
	{
		
	  fillCounter = 3 ;
	  mainCounter = 0 ; 
		CheckEnd ( HeaderPacket );
		VectorCheck (); 
		
	}
}
void BUS::VectorCheck ( void )
{
	UI_buff.resize (40);
	for ( int i=0; i< 20 ; i++)
		vectorCheck[i] = 0;
	for ( int i=0; i<15; i++)
		vectorCheck[i] = UI_buff.at (i);
}
void BUS::CheckEnd (struct HeaderPacket* HeaderPacket )
{
	recieveCheckSum = 0;
	 if (motorMode == PWMMode || motorMode == CNTMode )
  { 
		 for (int counter=3;counter<HeaderPacket->packetSize-2;counter++ )
	   {
				recieveCheckSum += main_buff.at(counter);
				recieveCheckSum = recieveCheckSum %256;	
	   }
  	if ( recieveCheckSum  == main_buff.at( HeaderPacket->packetSize -2 ) && '\r' == main_buff.at( HeaderPacket->packetSize -1 ) )  
	  {	

			// packet valid
     	busStatus = busy;
			HAL_TIM_Base_Start_IT(&htim4 );
      Toggle_LED_blue;
	  	mainOrder = 1;
	   	if (motorMode == PWMMode )
			  headerOrder = 0;
		  if (motorMode == CNTMode )
			  headerOrder = 1;
	  }
	}
	else if (motorMode ==FDBMode )
	{
		
		for (int counter=3;counter<HeaderPacket->packetSize-2;counter++ )
	  {
				recieveCheckSum += driver_buff.at(counter);
				recieveCheckSum = recieveCheckSum %256;	
	  }
		if ( recieveCheckSum == driver_buff.at( HeaderPacket->packetSize -2 ) && '\r' == driver_buff.at( HeaderPacket->packetSize -1 ) )  
	  {	
		  UIbuffer ();
	  	mainOrder = 1;
			headerOrder = 2;
			if (driver_buff.at(3)==Slave2_AD )
				Toggle_LED_red;
			
			
			
	  }
	}
	
  recStatus = ReceiveHeader ;
	mainCounter = 0 ; 
}
void BUS::SendPacket (struct HeaderPacket* HeaderPacket , int driverAD,int DATA1, int DATA2, int DATA3,int DATA4, int DATA5,int DATA6,int DATA7,int DATA8)
{
	if (DMAStatus == ready)
	{
					sendBuffer[0] = HeaderPacket ->firstByte;
					sendBuffer[1] = HeaderPacket ->secondByte;
					sendBuffer[2] = HeaderPacket ->thirdByte ;
					sendBuffer[3] = driverAD;
		      sendBuffer[4] = 15;
					sendBuffer[5] = DATA1;
					sendBuffer[6] = DATA2;
		      sendBuffer[7] = DATA3;
					sendBuffer[8] = DATA4;
					sendBuffer[9] = DATA5;
					sendBuffer[10] = DATA6;
					sendBuffer[11] = DATA7;
					sendBuffer[12] = DATA8;
		
		      sendCheckSum= 0;
					for(int counter =3;counter<FDB_pkg.packetSize - 3;counter++)   //
					{
						sendCheckSum += sendBuffer [counter];
						sendCheckSum  = sendCheckSum % 256;
					}
					sendBuffer[13] = sendCheckSum  ;
					sendBuffer[14] = '\r' ;
					EN_ADM_Set ;
					HAL_UART_Transmit_DMA(&huart1 , sendBuffer   ,15);							
					DMAStatus = busy;
				  Delay_ms (5);
					sendOrder ++;
	}
}

void BUS::SendPacket(struct HeaderPacket* HeaderPacket , int driverAD, int DATA1, int DATA2,int DATA3,int DATA4,int DATA5,int DATA6)
{
				if (DMAStatus == ready)
	      {
					sendBuffer[0] = HeaderPacket ->firstByte;
					sendBuffer[1] = HeaderPacket ->secondByte;
					sendBuffer[2] = HeaderPacket ->thirdByte ;
					sendBuffer[3] = driverAD;
		      sendBuffer[4] = 15;
					sendBuffer[5] = DATA1;
					sendBuffer[6] = DATA2;
		      sendBuffer[7] = DATA3;
		      sendBuffer[8] = DATA4;
	      	sendBuffer[9] = DATA5;
	      	sendBuffer[10] = DATA6;
		      sendBuffer[11] = NULL;  //
					sendBuffer[12] = NULL;  //
					sendCheckSum= 0;
					for(int counter =3;counter<FDB_pkg.packetSize - 3;counter++)   //
					{
						sendCheckSum += sendBuffer [counter];
						sendCheckSum  = sendCheckSum % 256;
					}
					
					sendBuffer[13] = sendCheckSum  ;
					sendBuffer[14] = '\r' ;
					EN_ADM_Set ;
					HAL_UART_Transmit_DMA(&huart1 , sendBuffer   ,15);							
					DMAStatus = busy;
				  Delay_ms (3);
					sendOrder ++;			
	}			
}

void BUS::Delay_ms (int unsigned ms )
{
	HAL_TIM_Base_Start_IT (&htim3);
	while (timer<ms ) 
	{
		HAL_GPIO_WritePin (GPIOB ,GPIO_PIN_8 ,GPIO_PIN_SET );
	}
	HAL_TIM_Base_Stop_IT (&htim3);
	timer = 0;
}

void BUS::SendPkgPWM()
{
	switch(sendOrder)
	{
		case 0:      
			SendPacket (&PWM_pkg ,Slave1_AD , main_buff.at(3),main_buff.at(4),main_buff.at(3),main_buff.at(4),main_buff.at(7),main_buff.at(8));
			break;
	  case 1:
		  SendPacket (&PWM_pkg ,Slave2_AD, main_buff.at(5),main_buff.at(6),main_buff.at(5),main_buff.at(6),main_buff.at(9),main_buff.at(10));
			break;
		case 2:
			SendPacket (&PWM_pkg ,Slave3_AD, main_buff.at(11),main_buff.at(12),main_buff.at(13),main_buff.at(14),main_buff.at(15),main_buff.at(16));
			break;
		case 3:
			SendPacket (&PWM_pkg ,Slave4_AD, main_buff.at(17),main_buff.at(18),main_buff.at(19),main_buff.at(21),NULL ,NULL );
			break;
		case 4:
			SendPacket (&PWM_pkg ,Head_AD , main_buff.at(20),main_buff.at(22),main_buff.at(23),main_buff.at(24),main_buff.at(25),main_buff.at(26),main_buff.at(27),main_buff.at(32));
		  break;
		case 5:
			mainOrder = 0;
			sendOrder = 0;
			break;
	};
	
}
void BUS::SendPkgCNT()
{
	switch(sendOrder)
	{
		case 0:       
			SendPacket (&PWM_pkg ,Slave1_AD,main_buff.at(3),main_buff.at(4),main_buff.at(3),main_buff.at(4),main_buff.at(7),main_buff.at(8));
			break;
	  case 1:
		  SendPacket (&PWM_pkg ,Slave2_AD,main_buff.at(5),main_buff.at(6),main_buff.at(5),main_buff.at(6),main_buff.at(9),main_buff.at(10));
			break;
		case 2:
			SendPacket (&CNT_pkg ,Slave3_AD,main_buff.at(11),main_buff.at(12),main_buff.at(13),main_buff.at(14),main_buff.at(15),main_buff.at(16),main_buff.at(30),main_buff.at(31));
			break;
		case 3:
			SendPacket (&PWM_pkg ,Slave4_AD, main_buff.at(17),main_buff.at(18),main_buff.at(19),main_buff.at(21),NULL ,NULL );
			break;
		case 4:
			SendPacket (&PWM_pkg ,Head_AD , main_buff.at(20),main_buff.at(22),main_buff.at(23),main_buff.at(24),main_buff.at(25),main_buff.at(26),main_buff.at(27),main_buff.at(32));
			break;
		case 5:
  	  
			mainOrder = 0;
			sendOrder = 0;
			break;
	};
	
}


void BUS::UIbuffer ( )
{

	UI_buff.resize (40);
	UI_buff.at(0)='P';
	UI_buff.at(1)='W';
	UI_buff.at(2)='M';
	
	switch (driver_buff.at(3))
	{
		case Slave1_AD :
			for (bufferCounter=0; bufferCounter < 6 ; bufferCounter ++)
				UI_buff.at(bufferCounter+3) = driver_buff.at (3+bufferCounter );
			break;
		case Slave2_AD :
			for (bufferCounter=0; bufferCounter < 6 ; bufferCounter ++)
			UI_buff.at(bufferCounter+9) = driver_buff.at (3+bufferCounter );
			break;
		case Slave3_AD:
			for (bufferCounter=0; bufferCounter < 6 ; bufferCounter ++)
			UI_buff.at(bufferCounter+15) = driver_buff.at (3+bufferCounter );
			break;
		case Slave4_AD:
			for (bufferCounter=0; bufferCounter < 6 ; bufferCounter ++)
			UI_buff.at(bufferCounter+21) = driver_buff.at (3+bufferCounter );
			break;
		UI_buff.at(28)='c';
	  UI_buff.at(29)='\r';
		
	};
}
void BUS::UsartReceive( UART_HandleTypeDef *usartType,int dataLenght)
{
	
			if (recStatus==ReceiveData )
				 HAL_UART_Receive_DMA(usartType,recData ,dataLenght-3);
			else if(recStatus == ReceiveHeader )
	  			HAL_UART_Receive_DMA(usartType,&recHeader,1);
}





